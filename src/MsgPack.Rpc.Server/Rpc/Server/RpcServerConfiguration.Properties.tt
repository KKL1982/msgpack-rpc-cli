<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#

// This file defines RpcServerConfiguration which is chunk of boilerplate.
var __typeName = "RpcServerConfiguration";
var __properties =
new List<Property>()
{
	new Property()
	{
		Name = "PreferIPv4",
		Type = "bool",
		Default = "false",
		Summary = "Gets or sets whether use IP v4 even when IP v6 is supported.",
		Value = "<c>true</c>, use IP v4 anyway; otherwise, <c>false</c>. " +
			"The default is <c>false</c>.",
	},
	new Property()
	{
		Name = "MinimumConnection",
		Type = "int",
		Default = "2",
		Summary = "Gets or sets the minimum connection to be pool for newly inbound connection.",
		Value = "The minimum connection to be pool for newly inbound connection. " +
			"The default is 2.",
	},
	new Property()
	{
		Name = "MaximumConnection",
		Type = "int",
		Default = "100",
		Summary = "Gets or sets the maximum connection to be handle inbound connection.",
		Value = "The minimum connection to be handle inbound connection. " +
			"The default is 100.",
	},
	new Property()
	{
		Name = "MinimumConcurrentRequest",
		Type = "int",
		Default = "2",
		Summary = "Gets or sets the minimum concurrency for the each clients.",
		Value = "The minimum concurrency for the each clients. " +
			"The default is 2.",
	},
	new Property()
	{
		Name = "MaximumConcurrentRequest",
		Type = "int",
		Default = "10",
		Summary = "Gets or sets the maximum concurrency for the each clients.",
		Value = "The maximum concurrency for the each clients. " +
			"The default is 10.",
	},
	new Property()
	{
		Name = "BindingEndPoint",
		Type = "EndPoint",
		Default = "null",
		Summary = "Gets or sets the local end point to be bound.",
		Value = "The local end point to be bound. " +
			"The default is <c>null</c>. The server will select appropriate version IP and bind to it with port 0.",
	},
	new Property()
	{
		Name = "ListenBackLog",
		Type = "int",
		Default = "100",
		Summary = "Gets or sets the listen back log of each sockets.",
		Value = "The listen back log of each sockets. " +
			"The default is 100.",
	},
	new Property()
	{
		Name = "PortNumber",
		Type = "int",
		Default = "10912",
		Summary = "Gets or sets the listening port number.",
		Value = "The listening port number. " +
			"The default is 10912.",
	},
	new Property()
	{
		Name = "ExecutionTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 110 )",
		Summary = "Gets or sets the timeout value to execute server thread.",
		Value = "The timeout value to execute server thread. " +
			"The default is 110 seconds. <c>null<c> means inifinite timeout.",
	},
	new Property()
	{
		Name = "HardExecutionTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 20 )",
		Summary = "Gets or sets the timeout value to abort server thread after graceful timeout is occurred.",
		Value = "The timeout value to abort server thread after graceful timeout is occurred. " +
			"The default is 20 seconds. <c>null<c> means inifinite timeout.",
	},
	new Property()
	{
		Name = "TransportManagerProvider",
		Type = "Func<RpcServer, ServerTransportManager>",
		Default = "( server ) => new TcpServerTransportManager( server )",
		Summary = "Gets or sets the factory function which creates new <see cref=\"ServerTransportManager\" />.",
		Value = "The factory function which creates new <see cref=\"ServerTransportManager\" />. " +
			"The default is the delegate which creates <see cref=\"TcpServerTransportManager\" /> instance.",
	},
	new Property()
	{
		Name = "DispatcherProvider",
		Type = "Func<RpcServer, Dispatcher>",
		Default = "( server ) => new LocatorBasedDispatcher( server )",
		Summary = "Gets or sets the factory function which creates new <see cref=\"Dispatcher\" />.",
		Value = "The factory function which creates new <see cref=\"Dispatcher\" />. " +
			"The default is the delegate which creates <see cref=\"LocatorBasedDispatcher\" /> instance.",
	},
	new Property()
	{
		Name = "ServiceTypeLocatorProvider",
		Type = "Func<RpcServerConfiguration, ServiceTypeLocator>",
		Default = "( config ) => new DefaultServiceTypeLocator()",
		Summary = "Gets or sets the factory function which creates new <see cref=\"ServiceTypeLocator\" />.",
		Value = "The factory function which creates new <see cref=\"ServiceTypeLocator\" />. " +
			"The default is the delegate which creates <see cref=\"DefaultServiceTypeLocator\" /> instance.",
	},
};

Func<string, string, Property> __objectPoolProviderPropertyFactory =
	( string name, string poolee ) =>
		new Property()
		{
			Name = name,
			Type = "Func<Func<" + poolee + ">, ObjectPoolConfiguration, ObjectPool<" + poolee + ">>",
			Default = "( factory, configuration ) => new StandardObjectPool<" + poolee + ">( factory, configuration )",
			Summary = "Gets or sets the factory function which creates new <see cref=\"ObjectPool{T}\" /> of " +
				"<see cref=\""+ poolee + "\" />.",
			Value = "The factory function which creates new <see cref=\"ObjectPool{T}\" /> of " +
				"<see cref=\""+ poolee + "\" />. " +
				"The default is the delegate which creates <see cref=\"StandardObjectPool{T}\" /> instance with <c>null</c> configuration.",
		};

__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"RequestContextPoolProvider",
		"ServerRequestContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"ResponseContextPoolProvider",
		"ServerResponseContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"ListeningContextPoolProvider",
		"ListeningContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"TcpTransportPoolProvider",
		"TcpServerTransport"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"UdpTransportPoolProvider",
		"UdpServerTransport"
	)
);

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Diagnostics.Contracts;
using System.Net;
using System.Text;
using MsgPack.Rpc.Server.Dispatch;
using MsgPack.Rpc.Server.Protocols;

namespace MsgPack.Rpc.Server
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

	partial class <#= __typeName #>
	{
<#
foreach( Property __property in __properties )
{
#>
		private <#= __property.Type #> _<#= Capitalize( __property.Name ) #> = <#= __property.Default #>;
		
		/// <summary>
		/// 	<#= __property.Summary #>
		/// </summary>
		/// <value>
		/// 	<#= __property.Value #>
		/// </value>
		public <#= __property.Type #> <#= __property.Name #>
		{
			get{ return this._<#= Capitalize( __property.Name ) #>; }
			set
			{
				this.VerifyIsNotFrozen();
				Validate<#= __property.Name #>( value );
				this._<#= Capitalize( __property.Name ) #> = value;
			}
		}
		
		/// <summary>
		/// 	Resets the <#=  __property.Name #> property value.
		/// </summary>
		public void Reset<#=  __property.Name #>()
		{
			this._<#= Capitalize( __property.Name ) #> = <#= __property.Default #>;
		}
		
		static partial void Validate<#= __property.Name #>( <#= __property.Type #> value );
<#
}
#>
		/// <summary>
		/// 	Returns a string that represents the current object.
		/// </summary>
		/// <returns>
		/// 	A string that represents the current object.
		/// </returns>
		public sealed override string ToString()
		{
			var buffer = new StringBuilder( <#= EstimateToStringSize( __properties ) #> );
			buffer.Append( "{ " );

<#
bool isFirstProperty = true;
foreach( Property __property in __properties )
{
	if( !isFirstProperty )
	{
#>
			buffer.Append( ", " );
<#
	}
	else
	{
		isFirstProperty = false;
	}
#>
			buffer.Append( "\"<#= __property.Name #>\" : " );
			ToString( this.<#= __property.Name #>, buffer );
<#
}
#>

			buffer.Append( " }" );
			return buffer.ToString();
		}
		
		private static void ToString<T>( T value, StringBuilder buffer )
		{
			if( value == null )
			{
				buffer.Append( "null" );
			}
			
			if( typeof( Delegate ).IsAssignableFrom( typeof( T ) ) )
			{
				var asDelegate = ( Delegate )( object )value;
				buffer.Append( "\"Type='" ).Append( asDelegate.Method.DeclaringType );

				if( asDelegate.Target != null )
				{
					buffer.Append( "', Instance='" ).Append( asDelegate.Target );
				}

				buffer.Append( "', Method='" ).Append( asDelegate.Method ).Append( "'\"" );
				return;
			}

			switch( Type.GetTypeCode( typeof( T ) ) )
			{
				case TypeCode.Boolean:
				{
					buffer.Append( value.ToString().ToLowerInvariant() );
					break;
				}
				case TypeCode.Byte:
				case TypeCode.Double:
				case TypeCode.Int16:
				case TypeCode.Int32:
				case TypeCode.Int64:
				case TypeCode.SByte:
				case TypeCode.Single:
				case TypeCode.UInt16:
				case TypeCode.UInt32:
				case TypeCode.UInt64:
				{
					buffer.Append( value.ToString() );
					break;
				}
				default:
				{
					buffer.Append( '"' ).Append( value.ToString() ).Append( '"' );
					break;
				}
			}
		}
	}
}
<#+
private static string Capitalize( string value )
{
	return Char.ToLowerInvariant( value[ 0 ] ) + value.Substring( 1 );
}

private static int EstimateToStringSize( IEnumerable<Property> properties )
{
	int result = 4; // "{ " + " }"
	foreach( var property in properties )
	{
		result += 7; // quote for name, " : ", ", ".
		result += property.Name.Length;
		if( Char.IsLower( property.Type[ 0 ] ) )
		{
			// Primitive, most of them are 1-5 degits, "true", "false".
			result += 4;
		}
		else if( property.Type.Equals( "String", StringComparison.OrdinalIgnoreCase ) )
		{
			// Strings
			result += 32;
		}
		else if( property.Type.Equals( "Uri", StringComparison.OrdinalIgnoreCase ) )
		{
			// Uri
			result += 64;
		}
		else if( property.Type.Equals( "Version", StringComparison.OrdinalIgnoreCase ) )
		{
			// Version
			result += 12;
		}
		else if( property.Type.Equals( "EndPoint", StringComparison.OrdinalIgnoreCase ) )
		{
			// EndPoint
			result += 24;
		}
		else if( property.Type.StartsWith( "Action" ) || property.Type.StartsWith( "Func" ) )
		{
			// Delegates
			result += 320;
		}
		else
		{
			// Enums, complex objects...
			result += 16;
		}
	}

	// Ceil to next 2^N integer.
	return ( int )Math.Pow( 2, Math.Ceiling( Math.Log( result, 2 ) ) );
}

private class Property
{
	public string Name;
	public string Type;
	public string Summary;
	public string Value;
	public string Default;
}
#>